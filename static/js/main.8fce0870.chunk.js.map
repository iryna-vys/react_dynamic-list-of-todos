{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","status","handleChange","event","field","setState","target","value","this","props","todos","onSelect","selectedUserId","filteredTodos","filter","title","toLowerCase","includes","completed","className","type","onChange","map","id","userId","key","classNames","readOnly","onClick","React","Component","API_URL","getUser","fetch","then","response","ok","json","Error","statusText","CurrentUser","user","getUserData","data","prevProps","name","email","phone","onClear","App","handleSelectUser","handleClearUser","correctTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fce0870.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    status: 'all',\n  };\n\n  handleChange = (event, field) => {\n    this.setState({\n      [field]: event.target.value,\n    });\n  };\n\n  render() {\n    const { todos, onSelect, selectedUserId } = this.props;\n\n    const filteredTodos = todos\n      .filter(\n        ({ title }) => title.toLowerCase().includes(this.state.query),\n      ).filter(\n        ({ completed }) => {\n          switch (this.state.status) {\n            case 'active':\n              return !completed;\n            case 'completed':\n              return completed;\n            default:\n              return true;\n          }\n        },\n      );\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <label>\n          Search by title\n          <input\n            type=\"text\"\n            onChange={event => this.handleChange(event, 'query')}\n          />\n        </label>\n        <select\n          onChange={event => this.handleChange(event, 'status')}\n        >\n          <option value=\"\">\n            Select todos\n          </option>\n          <option\n            value=\"all\"\n          >\n            All\n          </option>\n          <option\n            value=\"active\"\n          >\n            Active\n          </option>\n          <option\n            value=\"completed\"\n          >\n            Completed\n          </option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(({ id, title, userId, completed }) => (\n              <li\n                key={id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': completed,\n                  'TodoList__item--unchecked': !completed,\n                })}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{title}</p>\n                </label>\n                <button\n                  className={classNames('TodoList__user-button', 'button', {\n                    'TodoList__user-button--selected':\n                      userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelect(userId)}\n                >\n                  User&nbsp;\n                  {userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onSelect: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","const API_URL = `https://mate-api.herokuapp.com`;\n\nexport const getTodos = () => (\n  fetch(`${API_URL}/todos`)\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.status}: ${response.statusText}`);\n    })\n);\n\nexport const getUser = id => (\n  fetch(`${API_URL}/users/${id}`)\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(`${response.status}: ${response.statusText}`);\n    })\n);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.getUserData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUserData();\n    }\n  }\n\n  getUserData = () => {\n    getUser(this.props.userId)\n      .then(({ data: user }) => {\n        this.setState({\n          user,\n        });\n      });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"button\"\n          onClick={this.props.onClear}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(({ data: todos }) => {\n        const correctTodos = todos\n          .filter(({ title, completed, userId }) => (\n            title\n            && typeof (completed) === 'boolean'\n            && typeof (userId) === 'number'\n          ));\n\n        this.setState({\n          todos: correctTodos,\n        });\n      });\n  }\n\n  handleSelectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  handleClearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onSelect={this.handleSelectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClear={this.handleClearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}